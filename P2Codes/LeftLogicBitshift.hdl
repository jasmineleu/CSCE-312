// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/LeftLogicBitshift.hdl
// Jasmine Leu

/**
 * Shift x left y bits, new bits are filled in with 0, you may not use any DFF or clocked chip in this implementation
 * You may assume the maximum shift is 8-bit
 */

CHIP LeftLogicBitshift {
    IN x[16], y[16];
    OUT out[16];

    PARTS:
   // Put you code here:
   Mux(a=x[0], b=false, sel=y[0], out=a0);
   Mux(a=x[1], b=x[0], sel=y[0], out=a1);
   Mux(a=x[2], b=x[1], sel=y[0], out=a2);
   Mux(a=x[3], b=x[2], sel=y[0], out=a3);
   Mux(a=x[4], b=x[3], sel=y[0], out=a4);
   Mux(a=x[5], b=x[4], sel=y[0], out=a5);
   Mux(a=x[6], b=x[5], sel=y[0], out=a6);
   Mux(a=x[7], b=x[6], sel=y[0], out=a7);
   Mux(a=x[8], b=x[7], sel=y[0], out=a8);
   Mux(a=x[9], b=x[8], sel=y[0], out=a9);
   Mux(a=x[10], b=x[9], sel=y[0], out=a10);
   Mux(a=x[11], b=x[10], sel=y[0], out=a11);
   Mux(a=x[12], b=x[11], sel=y[0], out=a12);
   Mux(a=x[13], b=x[12], sel=y[0], out=a13);
   Mux(a=x[14], b=x[13], sel=y[0], out=a14);
   Mux(a=x[15], b=x[14], sel=y[0], out=a15);

   Mux(a=a0, b=false, sel=y[1], out=b0);
   Mux(a=a1, b=false, sel=y[1], out=b1);
   Mux(a=a2, b=a0, sel=y[1], out=b2);
   Mux(a=a3, b=a1, sel=y[1], out=b3);
   Mux(a=a4, b=a2, sel=y[1], out=b4);
   Mux(a=a5, b=a3, sel=y[1], out=b5);
   Mux(a=a6, b=a4, sel=y[1], out=b6);
   Mux(a=a7, b=a5, sel=y[1], out=b7);
   Mux(a=a8, b=a6, sel=y[1], out=b8);
   Mux(a=a9, b=a7, sel=y[1], out=b9);
   Mux(a=a10, b=a8, sel=y[1], out=b10);
   Mux(a=a11, b=a9, sel=y[1], out=b11);
   Mux(a=a12, b=a10, sel=y[1], out=b12);
   Mux(a=a13, b=a11, sel=y[1], out=b13);
   Mux(a=a14, b=a12, sel=y[1], out=b14);
   Mux(a=a15, b=a13, sel=y[1], out=b15);

   Mux(a=b0, b=false, sel=y[2], out=c0);
   Mux(a=b1, b=false, sel=y[2], out=c1);
   Mux(a=b2, b=false, sel=y[2], out=c2);
   Mux(a=b3, b=false, sel=y[2], out=c3);
   Mux(a=b4, b=b0, sel=y[2], out=c4);
   Mux(a=b5, b=b1, sel=y[2], out=c5);
   Mux(a=b6, b=b2, sel=y[2], out=c6);
   Mux(a=b7, b=b3, sel=y[2], out=c7);
   Mux(a=b8, b=b4, sel=y[2], out=c8);
   Mux(a=b9, b=b5, sel=y[2], out=c9);
   Mux(a=b10, b=b6, sel=y[2], out=c10);
   Mux(a=b11, b=b7, sel=y[2], out=c11);
   Mux(a=b12, b=b8, sel=y[2], out=c12);
   Mux(a=b13, b=b9, sel=y[2], out=c13);
   Mux(a=a14, b=b10, sel=y[2], out=c14);
   Mux(a=a15, b=b11, sel=y[2], out=c15);

   Mux(a=c0, b=false, sel=y[3], out=d0);
   Mux(a=c1, b=false, sel=y[3], out=d1);
   Mux(a=c2, b=false, sel=y[3], out=d2);
   Mux(a=c3, b=false, sel=y[3], out=d3);
   Mux(a=c4, b=false, sel=y[3], out=d4);
   Mux(a=c5, b=false, sel=y[3], out=d5);
   Mux(a=c6, b=false, sel=y[3], out=d6);
   Mux(a=c7, b=false, sel=y[3], out=d7);
   Mux(a=c8, b=c0, sel=y[3], out=d8);
   Mux(a=c9, b=c1, sel=y[3], out=d9);
   Mux(a=c10, b=c2, sel=y[3], out=d10);
   Mux(a=c11, b=c3, sel=y[3], out=d11);
   Mux(a=c12, b=c4, sel=y[3], out=d12);
   Mux(a=c13, b=c5, sel=y[3], out=d13);
   Mux(a=c14, b=c6, sel=y[3], out=d14);
   Mux(a=c15, b=c7, sel=y[3], out=d15);

   Mux(a=d0, b=false, sel=y[4], out=out[0]);
   Mux(a=d1, b=false, sel=y[4], out=out[1]);
   Mux(a=d2, b=false, sel=y[4], out=out[2]);
   Mux(a=d3, b=false, sel=y[4], out=out[3]);
   Mux(a=d4, b=false, sel=y[4], out=out[4]);
   Mux(a=d5, b=false, sel=y[4], out=out[5]);
   Mux(a=d6, b=false, sel=y[4], out=out[6]);
   Mux(a=d7, b=false, sel=y[4], out=out[7]);
   Mux(a=d8, b=false, sel=y[4], out=out[8]);
   Mux(a=d9, b=false, sel=y[4], out=out[9]);
   Mux(a=d10, b=false, sel=y[4], out=out[10]);
   Mux(a=d11, b=false, sel=y[4], out=out[11]);
   Mux(a=d12, b=false, sel=y[4], out=out[12]);
   Mux(a=d13, b=false, sel=y[4], out=out[13]);
   Mux(a=d14, b=false, sel=y[4], out=out[14]);
   Mux(a=d15, b=false, sel=y[4], out=out[15]);
}
